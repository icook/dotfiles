#!/usr/bin/python2.7
import sys
import os
import dataset
import readline
import glob
import tabulate
from mock import MagicMock

from flask.ext.script import Manager
db = dataset.connect("sqlite:///{}".format(os.path.expanduser("~/.testnetbox")))


def raw_input_file(txt):
    def complete(text, state):
        return (glob.glob(text + '*') + [None])[state]

    readline.set_completer_delims(' \t\n;')
    readline.parse_and_bind("tab: complete")
    readline.set_completer(complete)
    return raw_input(txt)


class TableMapper(dataset.persistence.table.Table):
    def __init__(self, db, name):
        self.name = name
        self.__dict__ = db.get_table(name, primary_id="key", primary_type="String").__dict__

    def __getitem__(self, key):
        dat = self.find_one(key=key) or dict(key=key)
        return Result(dat, self)

    def __setitem__(self, key, value):
        if isinstance(value, dict):
            self.upsert(dict(key=key, **value), ['key'])
        else:
            self.upsert(dict(key=key, value=value), ['key'])

    def __str__(self):
        return "Table"
    __repr__ = __str__

    def tabulate(self):
        data = []
        cols = self.columns
        for row in self.all():
            print row
            data.append(row.get(k) for k in cols)
        return tabulate.tabulate(data, headers=cols)


config = TableMapper(db, "config")
currency = TableMapper(db, "currency")


class Result(object):
    def __init__(self, data, table):
        self.__dict__ = data or {}
        self.table = table

    def __nonzero__(self):
        return len(self.__dict__) > 2

    def reload(self):
        self.__dict__ = self.table[self.key]

    def __getitem__(self, key):
        return self.__dict__[key]

    def __setitem__(self, key, value):
        self.table[self.key] = {key: value}


config_template = """
# testnet-box functionality
testnet=1
dnsseed=0
upnp=0

# listen on different ports than default testnet
port={port}
rpcport={rpcport}

# always run a server, even with bitcoin-qt
server=1

# enable SSL for RPC server
#rpcssl=1

rpcuser=admin1
rpcpassword=123
"""


def start():
    return MagicMock()

manager = Manager(start)


@manager.command
def list():
    print "test"


@manager.command
def rescan():
    if not config['binary_path']:
        config['binary_path'] = raw_input_file("Where are the daemon binaries? ")

    root = config['binary_path'].value
    files = [os.path.join(root, f) for f in os.listdir(root)]
    daemons = [f for f in files if os.path.isfile(f) and os.access(f, os.X_OK)]
    for path in daemons:
        name = path.split('/')[-1]
        currency[name]['path'] = path

    print currency.tabulate()


manager.run()

action = sys.argv[1]
if action == "start" or action == "stop":
    for currency in sys.argv[2:]:
        os.system("cd ~/programming/{}-testnet-box/; make {}".format(currency, action))
